#-*- coding: utf-8 -*-
import cv2, numpy, glob, pyautogui, threading, random, _thread
from tkinter import *
from tkinter import messagebox
from tkinter.filedialog import askopenfilename
from tkinter.filedialog import asksaveasfile
from tkinter.filedialog import askdirectory
from PIL import ImageGrab, Image, ImageTk, ImageOps, ImageDraw
from win32api import GetSystemMetrics
import win32gui, win32api, win32con, os, sys, time, win32com.client, ctypes
import win32com.shell.shell as shell
from urllib.request import urlopen
from datetime import datetime, timedelta

import requests
from time import localtime
from shutil import copyfile

import pickle
import win32con
import pyperclip
import io
#import admin
import pymysql
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import webbrowser
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
import smtplib
import shutil

from pynput.keyboard import Key, Controller
import subprocess
import shutil
from shutil import copyfile
import csv
from random import randint
from random import shuffle
from bs4 import BeautifulSoup
from selenium.webdriver.support.ui import Select
import random

from selenium.webdriver.chrome.options import Options
import chromedriver_autoinstaller

import pygetwindow as gw

import urllib.request
import urllib.error
import zipfile
import xml.etree.ElementTree as elemTree
import logging
import re
from io import BytesIO


mousex = 0
mousey = 0
filenamelist = []
searchstart = 0 # 0 : 시작안함 1 : 시작함
screen_width = win32api.GetSystemMetrics(0)
screen_height = win32api.GetSystemMetrics(1)
theloopindex = 0
currentImageMaxVal = 0.997

def main():

    keywordlist = []
    txtfile = open(r'물건.txt', 'r', encoding='utf-8-sig')
    txtlines = txtfile.readlines()
    for t in range(0, len(txtlines)):
        keywordlist.append(str(txtlines[t].replace('\n','')))

    txtfile.close()
    
    download_chromedriver()
    mafianet = r'https://ma-pia.net/keyword/association.php'
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")    
    driver = webdriver.Chrome(r'C:\crdriver\chromedriver.exe', options=options)
    driver.get(mafianet)
    time.sleep(3)

    crkeylist = []
    crpc1list = []
    crpc2list = []
    crpc3list = []
    crmb1list = []
    crmb2list = []
    crmb3list = []
    navershoplist = []
    viewnotice = []
    
    for k in range(0, len(keywordlist)):

        try:
        
            driver.find_element_by_id('DataQ1').send_keys(keywordlist[k])
            time.sleep(2)
            driver.find_element_by_id('SDsave').click()
            time.sleep(10)
            tbodytxt = driver.find_element_by_xpath("//tbody[@class='sch_tbody']").text
            keylists = tbodytxt.split('\n')
            for l in range(0, len(keylists)):
                indexnum = keylists[l].split(' ')[0]
                keyword = keylists[l].split(' ')[1]
                pc1 = keylists[l].split(' ')[2]
                mb1 = keylists[l].split(' ')[3]
                pc2 = keylists[l].split(' ')[5]
                mb2 = keylists[l].split(' ')[6]
                pc3 = keylists[l].split(' ')[7]
                mb3 = keylists[l].split(' ')[8]

                if (keyword not in crkeylist and int(mb1.replace(',','')) > 1000):
                    crkeylist.append(keyword)
                    crpc1list.append(pc1)
                    crpc2list.append(pc2)
                    crpc3list.append(pc3)
                    crmb1list.append(mb1)
                    crmb2list.append(mb2)
                    crmb3list.append(mb3)

                    navershopping = 0

                    soupurl = r'https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=1&ie=utf8&query=' + keyword
                    souptxt = requests.get(soupurl).text

                    if ('sc_new sp_intent_block' in str(souptxt)):
                        viewnotice.append('스마트블럭')
                    else:
                        viewnotice.append('뷰탭')
                    
                    titlesplit = str(souptxt).split('api_title')
                    for t in range(0, len(titlesplit)):
                        if ('네이버쇼핑' in titlesplit[t]):
                            navershopping = 1

                    if (navershopping == 1):
                        navershoplist.append('O')
                    else:
                        navershoplist.append('X')

                    shoppingurl = r'https://msearch.shopping.naver.com/search/all?origQuery=' + keyword + '&pagingIndex=1&pagingSize=40&productSet=total&query=' + keyword + '&sort=rel&viewType=bgi'
                    shoppingcount = 0
                    shoppingresult = requests.get(shoppingurl).text
                    shopplitlist = str(shoppingresult).split('li class')

                    maxpuramount = 0

                    for sp in range(0, len(shopplitlist)):

                        purchasedamount = find_between(str(shopplitlist[sp]), '구매<em>', '</em>').replace('+','')
                        try:
                            if (int(purchasedamount) > maxpuramount):
                                maxpuramount = int(purchasedamount)
                        except:
                            pass
                        
                    time.sleep(1)

                    if (maxpuramount >= 200):
                    
                        printingtxt = str(crkeylist[len(crkeylist)-1]) + ',' + str(navershoplist[len(crkeylist)-1]) + ',' +  str(viewnotice[len(crkeylist)-1]) + ',' +  str(crpc1list[len(crkeylist)-1]) + ',' +  str(crpc2list[len(crkeylist)-1]) + ',' +  str(crpc3list[len(crkeylist)-1]) + ',' + str(crmb1list[len(crkeylist)-1]) + ',' + str(crmb2list[len(crkeylist)-1]) + ',' + str(crmb3list[len(crkeylist)-1]) + ',' + str(maxpuramount) + '+\n'
                        print (printingtxt)               

                        txtfile2 = open(r'result.txt', 'a', encoding='utf-8-sig')
                        txtfile2.write(printingtxt)
                        txtfile2.close()
                        time.sleep(0.5)

        except:
            pass

    driver.quit()


def get_variable_separator():

    if sys.platform.startswith('win'):
        return ';'
    return ':'


def get_platform_architecture():
    if sys.platform.startswith('linux') and sys.maxsize > 2 ** 32:
        platform = 'linux'
        architecture = '64'
    elif sys.platform == 'darwin':
        platform = 'mac'
        architecture = '64'
    elif sys.platform.startswith('win'):
        platform = 'win'
        architecture = '32'
    else:
        raise RuntimeError('Could not determine chromedriver download URL for this platform.')
    return platform, architecture


def get_chromedriver_url(version):

    base_url = 'https://chromedriver.storage.googleapis.com/'
    platform, architecture = get_platform_architecture()
    return base_url + version + '/chromedriver_' + platform + architecture + '.zip'


def find_binary_in_path(filename):

    if 'PATH' not in os.environ:
        return None
    for directory in os.environ['PATH'].split(get_variable_separator()):
        binary = os.path.abspath(os.path.join(directory, filename))
        if os.path.isfile(binary) and os.access(binary, os.X_OK):
            return binary
    return None


def check_version(binary, required_version):
    try:
        version = subprocess.check_output([binary, '-v'])
        version = re.match(r'.*?([\d.]+).*?', version.decode('utf-8'))[1]
        if version == required_version:
            return True
    except Exception:
        return False
    return False


def get_chrome_version():

    platform, _ = get_platform_architecture()
    
    if platform == 'linux':
        executable_name = 'google-chrome'
        if os.path.isfile('/usr/bin/chromium-browser'):
            executable_name = 'chromium-browser'
        if os.path.isfile('/usr/bin/chromium'):
            executable_name = 'chromium'
        with subprocess.Popen([executable_name, '--version'], stdout=subprocess.PIPE) as proc:
            version = proc.stdout.read().decode('utf-8').replace('Chromium', '').replace('Google Chrome', '').strip()
    elif platform == 'mac':
        process = subprocess.Popen(['/Applications/Google Chrome.app/Contents/MacOS/Google Chrome', '--version'], stdout=subprocess.PIPE)
        version = process.communicate()[0].decode('UTF-8').replace('Google Chrome', '').strip()
    elif platform == 'win':
        process = subprocess.Popen(
            ['reg', 'query', 'HKEY_CURRENTTwMfMf7Lek1iEvAfgjaj9yCpdTyQLrSJvKcon', '/v', 'version'],
            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL
        )
        version = process.communicate()[0].decode('UTF-8').strip().split()[-1]
    else:
        return
    
    return version


def get_major_version(version):
    return version.split('.')[0]


def get_matched_chromedriver_version(version):
    doc = urllib.request.urlopen('https://chromedriver.storage.googleapis.com').read()
    root = elemTree.fromstring(doc)
    for k in root.iter('{http://doc.s3.amazonaws.com/2006-03-01}Key'):
        if k.text.find(get_major_version(version) + '.') == 0:
            return k.text.split('/')[0]
    return


def download_chromedriver():

    try:
        os.mkdir(r'C:\crdriver')
        time.sleep(1)
    except:
        pass

    chrome_version = get_chrome_version()
    if not chrome_version:
        logging.debug('Chrome is not installed.')
        return
    chromedriver_version = get_matched_chromedriver_version(chrome_version)
    if not chromedriver_version:
        logging.debug('Can not find chromedriver for currently installed chrome version.')
        return
    major_version = get_major_version(chromedriver_version)

    chromedriver_dir = r'C:\crdriver'
        
    chromedriver_filename = r'chromedriver.exe'
    chromedriver_filepath = os.path.join(chromedriver_dir, chromedriver_filename)
    if not os.path.isfile(chromedriver_filepath) or \
            not check_version(chromedriver_filepath, chromedriver_version):
        logging.debug(f'Downloading chromedriver ({chromedriver_version})...')
        if not os.path.isdir(chromedriver_dir):
            os.mkdir(chromedriver_dir)
        url = get_chromedriver_url(version=chromedriver_version)
        try:
            response = urllib.request.urlopen(url)
            if response.getcode() != 200:
                raise urllib.error.URLError('Not Found')
        except urllib.error.URLError:
            raise RuntimeError(f'Failed to download chromedriver archive: {url}')
        archive = BytesIO(response.read())
        with zipfile.ZipFile(archive) as zip_file:
            zip_file.extract(chromedriver_filename, chromedriver_dir)
    else:
        logging.debug('Chromedriver is already installed.')
    if not os.access(chromedriver_filepath, os.X_OK):
        os.chmod(chromedriver_filepath, 0o744)
    return chromedriver_filepath

def find_between( s, first, last ):
    try:
        start = s.index( first ) + len( first )
        end = s.index( last, start )
        return s[start:end]
    except ValueError:
        return ""

def find_between_r( s, first, last ):
    try:
        start = s.rindex( first ) + len( first )
        end = s.rindex( last, start )
        return s[start:end]
    except ValueError:
        return ""



# 이미지의 중앙값 x,y 반환
def checkImageExist(imagefilename, threshold):
    searchedcentroidx = 0
    searchedcentroidy = 0
    boolean = "false"
    try:
        imgscreen = ImageGrab.grab(bbox=(0,0,screen_width,screen_height))
        imgscreen_np = numpy.array(imgscreen)
        imgscreen_np = imgscreen_np[:, :, ::-1].copy()
        img = cv2.cvtColor(imgscreen_np, cv2.COLOR_BGR2GRAY) 
        img2 = img.copy() # 배경 이미지            
        imgfileopen = Image.open(imagefilename)      
        imgfile_np = numpy.array(imgfileopen)
        imgfile = cv2.cvtColor(imgfile_np, cv2.COLOR_BGR2GRAY)    
        img4 = imgfile.copy()            
        img42 = img4.copy()            
        w2 = img42.shape[1]
        h2 = img42.shape[0]
        #print(imagefilename)
        res = cv2.matchTemplate(img2,img42,cv2.TM_CCORR_NORMED)
        #methods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR', 'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
        #print (max_loc)
        searchedcentroidx = int(max_loc[0] + (w2 / 2))          #찾은 이미지의 중앙x값
        searchedcentroidy = int(max_loc[1] + (h2 / 2))          #찾은 이미지의 중앙y값
        if (float(max_val) >= float(threshold)):
            boolean = "true"               
        else:
            boolean = "false"          
    except:
        boolean = "false"
            
    return boolean, searchedcentroidx, searchedcentroidy


main()
